import React from 'react';
import { Route, Vehicle } from '../types';
import { Download, Share2, FileText } from 'lucide-react';
import { RiskCalculator } from '../utils/riskCalculator';

interface RouteExportToolsProps {
  routes: Route[];
  vehicle: Vehicle;
  selectedRouteId: string;
}

export const RouteExportTools: React.FC<RouteExportToolsProps> = ({
  routes,
  vehicle,
  selectedRouteId
}) => {
  const selectedRoute = routes.find(r => r.id === selectedRouteId);

  const exportToJSON = () => {
    const exportData = {
      vehicle,
      routes: routes.map(route => ({
        ...route,
        riskScore: RiskCalculator.calculateRouteRisk(route, vehicle),
        exportedAt: new Date().toISOString()
      })),
      selectedRouteId,
      exportMetadata: {
        appVersion: '1.0.0',
        exportDate: new Date().toISOString(),
        vehicleType: vehicle.length >= 35 ? 'Large Vehicle' : 'Standard Vehicle'
      }
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `route-analysis-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportToCSV = () => {
    const csvData = routes.map(route => {
      const riskScore = RiskCalculator.calculateRouteRisk(route, vehicle);
      return {
        'Route Name': route.name,
        'Distance (miles)': route.totalDistance,
        'Time (minutes)': route.estimatedTime,
        'Risk Score (%)': Math.round(riskScore),
        'Critical Points': route.criticalPoints?.length || 0,
        'Segments': route.segments.length,
        'Stops': route.stops?.length || 0
      };
    });

    const headers = Object.keys(csvData[0]).join(',');
    const rows = csvData.map(row => Object.values(row).join(','));
    const csv = [headers, ...rows].join('\n');

    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `route-comparison-${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateReport = () => {
    if (!selectedRoute) return;

    const riskScore = RiskCalculator.calculateRouteRisk(selectedRoute, vehicle);
    const report = `
ACADIA TRANSIT SENTINEL - ROUTE ANALYSIS REPORT
Generated: ${new Date().toLocaleString()}

VEHICLE INFORMATION:
- Length: ${vehicle.length} ft
- Width: ${vehicle.width} ft  
- Height: ${vehicle.height} ft
- Classification: ${vehicle.length >= 35 ? 'Large Commercial Vehicle' : 'Standard Vehicle'}

SELECTED ROUTE: ${selectedRoute.name}
- Total Distance: ${selectedRoute.totalDistance} miles
- Estimated Time: ${selectedRoute.estimatedTime} minutes
- Overall Risk Score: ${Math.round(riskScore)}%
- Critical Points: ${selectedRoute.criticalPoints?.length || 0}
- Number of Segments: ${selectedRoute.segments.length}
${selectedRoute.stops?.length ? `- Stops: ${selectedRoute.stops.length}` : ''}

ROUTE COMPARISON:
${routes.map((route, index) => {
  const routeRisk = RiskCalculator.calculateRouteRisk(route, vehicle);
  return `${index + 1}. ${route.name}
   Distance: ${route.totalDistance}mi | Time: ${route.estimatedTime}min | Risk: ${Math.round(routeRisk)}%`;
}).join('\n')}

CRITICAL POINTS:
${selectedRoute.criticalPoints?.map((point, index) => 
  `${index + 1}. ${point.description} (${point.riskLevel.toUpperCase()})`
).join('\n') || 'No critical points identified'}

RECOMMENDATIONS:
- ${riskScore < 30 ? 'Route is low risk and suitable for operation' : 
     riskScore < 60 ? 'Moderate risk - exercise normal caution' :
     'High risk route - consider alternatives or additional safety measures'}
${vehicle.length >= 35 ? '- Large vehicle: Ensure adequate turning radius at all intersections' : ''}
${selectedRoute.criticalPoints?.length ? '- Monitor critical points closely during navigation' : ''}

This report was generated by Acadia Transit Sentinel for route planning purposes.
    `.trim();

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `route-report-${selectedRoute.name.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const shareRoute = async () => {
    if (!selectedRoute) return;

    const shareData = {
      title: `Route Analysis: ${selectedRoute.name}`,
      text: `${selectedRoute.totalDistance} miles, ${selectedRoute.estimatedTime} minutes, ${Math.round(RiskCalculator.calculateRouteRisk(selectedRoute, vehicle))}% risk`,
      url: window.location.href
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(`${shareData.title}\n${shareData.text}\n${shareData.url}`);
      alert('Route details copied to clipboard!');
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 border border-gray-100 dark:border-gray-700">
      <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-3">Export & Share</h3>
      
      <div className="grid grid-cols-2 gap-2">
        <button
          onClick={exportToJSON}
          className="flex items-center gap-2 px-3 py-2 text-sm bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-md hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
        >
          <Download className="w-4 h-4" />
          JSON
        </button>
        
        <button
          onClick={exportToCSV}
          className="flex items-center gap-2 px-3 py-2 text-sm bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-md hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors"
        >
          <FileText className="w-4 h-4" />
          CSV
        </button>
        
        <button
          onClick={generateReport}
          disabled={!selectedRoute}
          className="flex items-center gap-2 px-3 py-2 text-sm bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 rounded-md hover:bg-purple-200 dark:hover:bg-purple-900/50 transition-colors disabled:opacity-50"
        >
          <FileText className="w-4 h-4" />
          Report
        </button>
        
        <button
          onClick={shareRoute}
          disabled={!selectedRoute}
          className="flex items-center gap-2 px-3 py-2 text-sm bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 rounded-md hover:bg-indigo-200 dark:hover:bg-indigo-900/50 transition-colors disabled:opacity-50"
        >
          <Share2 className="w-4 h-4" />
          Share
        </button>
      </div>
    </div>
  );
};
